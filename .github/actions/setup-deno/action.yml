name: 'Setup Deno Environment'
description: 'Checks out repository, sets up Deno, and caches dependencies'
inputs:
  deno-version:
    description: 'The Deno version to install'
    required: true
outputs:
  deno-cache-dir:
    description: "The path to the Deno cache directory"
    value: ${{ steps.set-cache-dir.outputs.dir }}
runs:
  using: "composite"
  steps:
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ inputs.deno-version }}

    - name: Set Deno cache directory
      id: set-cache-dir # output を参照するために id を設定
      shell: bash
      run: |
        dir_path="$RUNNER_TEMP/deno_cache"
        echo "DENO_CACHE_DIR=$dir_path" >> $GITHUB_ENV
        echo "dir=$dir_path" >> $GITHUB_OUTPUT # output 用

    - name: Cache Deno modules and npm packages
      shell: bash
      run: |
        deno cache --reload --lock=deno.lock
        # npmパッケージのバイナリを解決するために、一度lintタスクで使われるコマンドに近い形で実行を試みる
        # これにより、必要なバイナリがDenoの管理する場所にダウンロードされることを期待
        # Biomeのバージョンチェックに失敗してもキャッシュ処理は続行する
        deno run -A npm:@biomejs/biome --version || echo "Biome version check failed but continuing to allow caching step."

    - name: Cache Deno dependencies
      uses: actions/cache@v4
      with:
        # Use the environment variable set in the previous step
        path: |
          ${{ env.DENO_CACHE_DIR }}
          ~/.cache/deno/npm # npmパッケージのキャッシュ場所も追加
        # Improve cache key accuracy by including deno.jsonc
        key: deno-npm-${{ runner.os }}-${{ hashFiles('deno.jsonc', 'deno.lock') }}
        restore-keys: |
          deno-npm-${{ runner.os }}-